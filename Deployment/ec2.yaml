AWSTemplateFormatVersion: '2010-09-09'
Description: Launch a t2.micro Ubuntu Server 24.04 LTS (HVM) (64_x86) on EC2 in us-east-1 region in the default vpc

Parameters:
  NameOfService:
    Description: The name of the service this stack is to be used for
    Type: String
    Default: Flask-Server
  EnvironmentName:
    Description: Name of the environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - test
  DeploymentBucket:
    Description: Name of the deployment bucket
    Type: String
    Default: dev-flask-lab
  InstanceTypeParam:
    Description: Type of the EC2 instance
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - m1.small
      - m1.large
Mappings:
  RegionAMIConfig:
    us-east-1:
      AMI: ami-04b70fa74e45c3917
    us-east-2:
      AMI: ami-09040d770ffe2224f
    ap-south-1:
      AMI: ami-0f58b397bc5c1f2e8
Resources:
  MySSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Name of the deployment bucket
      Name: deployment-bucket
      Tier: Standard
      Type: String
      DataType: text
      Value: !Ref DeploymentBucket
      Tags:
        Name: deployment-bucket
        Environment: !Ref EnvironmentName
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParam
      ImageId: !FindInMap
        - RegionAMIConfig
        - !Ref AWS::Region
        - AMI
      Monitoring: true
      IamInstanceProfile: 
        Fn::ImportValue: !Sub ${EnvironmentName}-ec2-instance-profile
      SecurityGroups:
        - Fn::ImportValue: !Sub ${EnvironmentName}-ec2-security-group
      Tags:
        - Key: Name
          Value: !Ref NameOfService
        - Key: RegionName
          Value: !Ref AWS::Region
        - Key: Environment
          Value: !Ref EnvironmentName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt upgrade -y
          apt install jq -y
          apt install python3-pip unzip less -y
          pip3 install boto3
          curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          ./aws/install
          rm -r awscliv2.zip
          wget -qO- https://get.docker.com | sh
          apt update -y
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ssm-user
          aws s3 cp s3://${DeploymentBucket}/PDFExtractor/ /home/ubuntu/PDFExtractor/ --recursive
          docker build -t manishdocker1810/pdfextractor:v1.0 /home/ubuntu/PDFExtractor/
          docker container run -d --name pdfextractor -p 80:5000 -e AWS_REGION=${AWS::Region} -e BUCKET_NAME=${DeploymentBucket} --restart on-failure manishdocker1810/pdfextractor:v1.0
          docker volume create portainer_data
          docker container run -d --name portainer -p 8080:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
Outputs:
  AccountId:
    Description: AWS Account ID
    Value: !Ref AWS::AccountId
  RegionName:
    Description: AWS Region Name
    Value: !Ref AWS::Region
  StackId:
    Description: Current Stack ID
    Value: !Ref AWS::StackId
  StackName:
    Description: Current Stack Name
    Value: !Ref AWS::StackName
  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref MyEC2Instance
  EC2SecurityGroup:
    Description: Security Group ID of the EC2 instance
    Value: 
      Fn::ImportValue: !Sub ${EnvironmentName}-ec2-security-group
  PublicDnsName:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicDnsName
  PublicIpAddress:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
  AMIId:
    Description: ImageId of the AMI
    Value: !FindInMap
      - RegionAMIConfig
      - !Ref AWS::Region
      - AMI
  SSMParameter:
    Description: SSM Parameter
    Value: !Ref MySSMParameter
    